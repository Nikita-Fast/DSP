from interface import Block, Connection

"""
Модель не является абстрактной. Задачи модели:
1) аккумуляция блоков и их соединение
2) генерация данных блоками источниками
3) передача данных между блоками
4) обработка данных блоками
5) организация параллельных вычислений 
6) организация распределённых вычислений

У модели должен быть свой GUI (отдельный файл), представляющий собой окно в котором можно добавлять 
блоки и соединять их.
Блоки могут браться парсингом из папки "blocks". В GUI должна быть кнопка запуска модели и возможность 
настройки ее параметров
"""
class Model:

    def __init__(self):
        """
        По умолчанию модель создается пустой. Далее в нее добавляются блоки и соединения
        """

        self.blocks = []
        self.connections = []
        self.source_blocks = []

    def add_block(self, block):
        """
        Добавление блока происходит при его попадании в окно GUI модели.
        Блоки глобально делятся на два типа - просто блоки и источники
        Здесь надо понять какой тип блока добавляется и положить его в нужный список
        """
        pass

    def remove_block(self, block_id):
        """
        Удаление блока происходит при его удалении из GUI
        """
        pass

    def connect_ports(self, source_id, destination_id):
        """
        Когда в gui проводится стрелка от одного блока к другому происходит соединение портов
        """
        pass

    def disconnect_ports(self, connection_id):
        pass

    def process(self) -> None:
        """
        Нам неважно в какой последовательности производится вызов обычных блоков
        Сначала отрабатывают все генераторы
        Затем прокидываются данные от всех блоков ко всем
        Затем идет работа всех блоков
        Если блок вернул process_flag = false то модель прекращает работу

        На старте надо сделать первичную проверку модели. У нас как минимум не должно быть блоков в которых есть
        не подключенные входы

        Здесь сложные вопросы:
        1) как распараллеливать
        2) что делать с обратной связью

        """
        process_flag = True
        while process_flag:
            for block in self.source_blocks:
                block.execute()

            for connection in self.connections:
                connection.flush()

            for block in self.blocks:
                process_flag = process_flag and block.execute()



